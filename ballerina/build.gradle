// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/plugin-gradle'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
    }
    dependencies {
        classpath "io.ballerina:plugin-gradle:${project.ballerinaGradlePluginVersion}"
    }
}

description = 'Ballerina - ASB Package'

def packageName = "asb"
def packageOrg = "xlibb"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

apply plugin: 'io.ballerina.plugin'

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
    testCoverageParam = "--code-coverage --coverage-format=xml --includes=io.xlibb.asb.*:xlibb.asb*"
}

configurations {
    externalJars
}

dependencies {
    /* Azure dependencies */
    externalJars(group: 'com.azure', name: 'azure-messaging-servicebus', version: "7.13.0") {
        transitive = false
    }
    externalJars(group: 'com.azure', name: 'azure-core', version: "1.34.0") {
        transitive = false
    }
    externalJars(group: 'com.azure', name: 'azure-core-amqp', version: "2.8.0") {
        transitive = false
    }
    externalJars(group: 'com.azure', name: 'azure-core-http-netty', version: "1.12.7") {
        transitive = false
    }
    
    /* Jackson dependencies */
    externalJars(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "2.13.4") {
        transitive = false
    }
    externalJars(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "2.13.4") {
        transitive = false
    }
    externalJars(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "2.13.4.2") {
        transitive = false
    }
    externalJars(group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: "2.13.4") {
        transitive = false
    }
    externalJars(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: "2.13.4") {
        transitive = false
    }

    /* Netty dependencies */
    externalJars(group: 'io.netty', name: 'netty-buffer', version: "4.1.82.Final") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-codec', version: "4.1.82.Final") {
        transitive = false
    }
    // this wan in `4.1.81.Final`
    externalJars(group: 'io.netty', name: 'netty-codec-dns', version: "4.1.82.Final") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-codec-http', version: "4.1.82.Final") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-codec-http2', version: "4.1.82.Final") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-codec-socks', version: "4.1.82.Final") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-common', version: "4.1.82.Final") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-handler', version: "4.1.82.Final") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-handler-proxy', version: "4.1.82.Final") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-resolver', version: "4.1.82.Final") {
        transitive = false
    }
    // this wan in `4.1.81.Final`
    externalJars(group: 'io.netty', name: 'netty-resolver-dns', version: "4.1.82.Final") {
        transitive = false
    }
    // this wan in `4.1.81.Final`
    externalJars(group: 'io.netty', name: 'netty-resolver-dns-classes-macos', version: "4.1.82.Final") {
        transitive = false
    }
    // this wan in `4.1.81.Final`
    externalJars 'io.netty:netty-resolver-dns-native-macos:4.1.82.Final:osx-x86_64'
    externalJars(group: 'io.netty', name: 'netty-transport', version: "4.1.82.Final") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-transport-classes-epoll', version: "4.1.82.Final") {
        transitive = false
    }
    externalJars 'io.netty:netty-transport-native-epoll:4.1.82.Final:linux-x86_64'
    externalJars(group: 'io.netty', name: 'netty-transport-classes-kqueue', version: "4.1.82.Final") {
        transitive = false
    }
    externalJars 'io.netty:netty-transport-native-kqueue:4.1.82.Final:osx-x86_64'
    externalJars(group: 'io.netty', name: 'netty-transport-native-unix-common', version: "4.1.82.Final") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-tcnative-classes', version: "2.0.54.Final") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-tcnative-boringssl-static', version: "2.0.54.Final") {
        transitive = false
    }
    externalJars 'io.netty:netty-tcnative-boringssl-static::windows-x86_64'
    externalJars 'io.netty:netty-tcnative-boringssl-static::linux-aarch_64'
    externalJars 'io.netty:netty-tcnative-boringssl-static::linux-x86_64'
    externalJars 'io.netty:netty-tcnative-boringssl-static::osx-aarch_64'
    externalJars 'io.netty:netty-tcnative-boringssl-static::osx-x86_64'

    /* Project reactor dependencies */
    externalJars(group: 'io.projectreactor', name: 'reactor-core', version: "3.4.23") {
        transitive = false
    }    
    externalJars(group: 'io.projectreactor.netty', name: 'reactor-netty-core', version: "1.0.23") {
        transitive = false
    }
    externalJars(group: 'io.projectreactor.netty', name: 'reactor-netty-http', version: "1.0.23") {
        transitive = false
    }

    /* Apache proton-j dependencies */
    externalJars(group: 'org.apache.qpid', name: 'proton-j', version: "0.33.8") {
        transitive = false
    }  

    /* Rective streams dependencies */
    externalJars(group: 'org.reactivestreams', name: 'reactive-streams', version: "1.0.4") {
        transitive = false
    }    
}

task updateTomlFiles {
    doLast {
        def stdlibDependentAsbVersion = project.asbVersion
        def newConfig = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        ballerinaTomlFile.text = newConfig
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml"
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/xlibb/module-asb")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

updateTomlFiles.dependsOn copyStdlibs

build.dependsOn ":asb-native:build"
build.dependsOn "generatePomFileForMavenPublication"
publishToMavenLocal.dependsOn build
publish.dependsOn build
